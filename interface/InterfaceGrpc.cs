// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: interface.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace GKEgRPCService {
  public static partial class GKEgRPCService
  {
    static readonly string __ServiceName = "GKEgRPCService.GKEgRPCService";

    static readonly grpc::Marshaller<global::GKEgRPCService.TestRequest> __Marshaller_GKEgRPCService_TestRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GKEgRPCService.TestRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GKEgRPCService.TestResponse> __Marshaller_GKEgRPCService_TestResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GKEgRPCService.TestResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GKEgRPCService.HelloWorldRequest> __Marshaller_GKEgRPCService_HelloWorldRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GKEgRPCService.HelloWorldRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GKEgRPCService.HelloWorldResponse> __Marshaller_GKEgRPCService_HelloWorldResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GKEgRPCService.HelloWorldResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::GKEgRPCService.TestRequest, global::GKEgRPCService.TestResponse> __Method_Test = new grpc::Method<global::GKEgRPCService.TestRequest, global::GKEgRPCService.TestResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Test",
        __Marshaller_GKEgRPCService_TestRequest,
        __Marshaller_GKEgRPCService_TestResponse);

    static readonly grpc::Method<global::GKEgRPCService.HelloWorldRequest, global::GKEgRPCService.HelloWorldResponse> __Method_HelloWorld = new grpc::Method<global::GKEgRPCService.HelloWorldRequest, global::GKEgRPCService.HelloWorldResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "HelloWorld",
        __Marshaller_GKEgRPCService_HelloWorldRequest,
        __Marshaller_GKEgRPCService_HelloWorldResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::GKEgRPCService.InterfaceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of GKEgRPCService</summary>
    [grpc::BindServiceMethod(typeof(GKEgRPCService), "BindService")]
    public abstract partial class GKEgRPCServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::GKEgRPCService.TestResponse> Test(global::GKEgRPCService.TestRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::GKEgRPCService.HelloWorldResponse> HelloWorld(global::GKEgRPCService.HelloWorldRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for GKEgRPCService</summary>
    public partial class GKEgRPCServiceClient : grpc::ClientBase<GKEgRPCServiceClient>
    {
      /// <summary>Creates a new client for GKEgRPCService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public GKEgRPCServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for GKEgRPCService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public GKEgRPCServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected GKEgRPCServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected GKEgRPCServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::GKEgRPCService.TestResponse Test(global::GKEgRPCService.TestRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Test(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::GKEgRPCService.TestResponse Test(global::GKEgRPCService.TestRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Test, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::GKEgRPCService.TestResponse> TestAsync(global::GKEgRPCService.TestRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TestAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::GKEgRPCService.TestResponse> TestAsync(global::GKEgRPCService.TestRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Test, null, options, request);
      }
      public virtual global::GKEgRPCService.HelloWorldResponse HelloWorld(global::GKEgRPCService.HelloWorldRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return HelloWorld(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::GKEgRPCService.HelloWorldResponse HelloWorld(global::GKEgRPCService.HelloWorldRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_HelloWorld, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::GKEgRPCService.HelloWorldResponse> HelloWorldAsync(global::GKEgRPCService.HelloWorldRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return HelloWorldAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::GKEgRPCService.HelloWorldResponse> HelloWorldAsync(global::GKEgRPCService.HelloWorldRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_HelloWorld, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override GKEgRPCServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new GKEgRPCServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(GKEgRPCServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Test, serviceImpl.Test)
          .AddMethod(__Method_HelloWorld, serviceImpl.HelloWorld).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, GKEgRPCServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Test, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::GKEgRPCService.TestRequest, global::GKEgRPCService.TestResponse>(serviceImpl.Test));
      serviceBinder.AddMethod(__Method_HelloWorld, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::GKEgRPCService.HelloWorldRequest, global::GKEgRPCService.HelloWorldResponse>(serviceImpl.HelloWorld));
    }

  }
}
#endregion
