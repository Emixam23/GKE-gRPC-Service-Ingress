package GKEgRPCService

import io.rouz.grpc.*
import GKEgRPCService.GKEgRPCServiceGrpc.GKEgRPCServiceStub

import kotlinx.coroutines.channels.ReceiveChannel
import kotlin.coroutines.suspendCoroutine

import io.grpc.Metadata
import io.grpc.stub.MetadataUtils

/**
 * Kotlin extension functions for [GKEgRPCService.GKEgRPCServiceGrpc.GKEgRPCServiceStub]
 *
 * Generated by gRPC Kotlin generator
 * Source: interface.proto
 */




suspend inline fun GKEgRPCServiceStub.test(request: GKEgRPCService.Interface.TestRequest): GKEgRPCService.Interface.TestResponse {
    return suspendCoroutine {
        test(request, ContinuationStreamObserver(it))
    }
}



suspend inline fun GKEgRPCServiceStub.helloWorld(request: GKEgRPCService.Interface.HelloWorldRequest): GKEgRPCService.Interface.HelloWorldResponse {
    return suspendCoroutine {
        helloWorld(request, ContinuationStreamObserver(it))
    }
}

/**
* Adds new binary header and returns the client
*/
fun GKEgRPCServiceStub.addBinaryHeader(
    header: String,
    bytes: ByteArray
): GKEgRPCServiceStub {
    val headers = Metadata()
    val key = Metadata.Key.of(header, Metadata.BINARY_BYTE_MARSHALLER)
    headers.put(key, bytes)

    return MetadataUtils.attachHeaders(this, headers)
}
